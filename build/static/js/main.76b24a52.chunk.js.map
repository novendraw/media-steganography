{"version":3,"sources":["Header.js","Steganography/helper.js","Steganography/Image.js","Steganography/Video.js","Steganography/Audio.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","className","getKeys","text","result","i","length","charNum","charCodeAt","push","encodeFile","plainText","key","cipherText","Uint8Array","keyCodes","decodeFile","convertStringToArrayBuffer","string","convertArrayBufferToBinaryString","array","data","toString","substr","convertBinaryStringToArrayBuffer","binaryString","removeLeadingZeroes","parseInt","substring","convertBinaryStringToArrayBufferWithLeadingZeroes","console","log","convertStringToBinaryString","binary","convertBinaryStringToString","String","fromCharCode","convertBinaryArrayToArrayBuffer","binaryArray","convertArrayBufferToBitplanesArray","modRemainder","header","repeat","bitplane","convertBitplanesArrayToArrayBuffer","bitplanesArray","dataCounter","j","byte","convertIntegerToBitplane","integer","convertBitplaneToInteger","firstFound","replace","readFileAsArrayBuffer","file","Promise","resolve","reject","reader","FileReader","onload","e","target","onerror","readAsArrayBuffer","readFileURL","readAsDataURL","downloadBinaryFile","filename","buffer","blob","Blob","type","window","navigator","msSaveOrOpenBlob","msSaveBlob","elem","document","createElement","href","URL","createObjectURL","download","body","appendChild","click","removeChild","alert","Image","props","toggleEncryption","event","setState","useEncryption","checked","saveFileName","resultFileName","value","renderImg","then","url","sourceImgURL","handleSubmit","preventDefault","state","sourceImg","inputSourceImg","fileToHide","inputFile","methodOption","encryptionKey","encryptKey","hidingOption","action","files","fileName","name","LSBEmbed","getLSB","BPCSEmbed","getBPCS","chessboard","resultCanvas","resultImgURL","psnr","imageURL","canvas","context","getContext","image","src","width","height","drawImage","getImageData","sourceImgData","this","sourceLength","fileArray","bufferArray","Array","from","shuffleSeed","shuffle","bufferLength","binaryFileName","remainderLength","fileSize","bufferString","color","renderResultImg","temp","hidingOptionColor","convertArrayBufferToString","lsb","resultArray","shuffledArray","unshuffle","counter","string1","string2","xorResult","xor","dataBuffer","fileNameArray","hidingBitplane","fileNameArraySizeBitplane","unshuffledArray","dataBitplanes","bufferSizeBitplane","sourceBitplanes","hidingOptionInserted","fileNameSizeInserted","bufferSizeInserted","fileNameCounter","fileNameConjugationMap","conjugationMap","noiseRegion","dataBitplanesToBeInserted","calculateComplexity","conjugate","conjugation","fileNameConjugationSizeBitplane","fileNameMapBitplane","sizeBitplane","mapBitplane","excessIndex","resultArrayBuffer","fileNameConjugationMapSize","fileNameConjugationMaps","conjugationMapSize","plusIndex","conjugationMaps","hidingCode","fileNameSize","fileNameBitplanes","fileNameString","includes","dataSize","resultBitplanes","leadingZeroes","finalArray","convertPBC_CGC","steganoArray","steganoClampedArray","Uint8ClampedArray","steganoImgData","ImageData","putImageData","resultImg","toDataURL","calculatePSNR","M","N","resultImgData","Math","pow","rms","sqrt","log10","round","link","toBlob","Fragment","Form","onSubmit","Row","Col","xs","id","Group","File","label","onChange","accept","controlId","Control","Button","variant","onClick","downloadFromCanvas","Label","as","Check","readOnly","ref","React","PureComponent","Video","messageFilename","file1","file2","sourceVid","inputSourceVid","message","inputMessage","seed","frameOption","all","sourceArray","messageArray","sourceBuffer","messageBuffer","getSeedFromKey","LSBExtract","renderVid","fileData","sourceVidURL","messageURL","resultVidURL","resultVid","resultFilename","psnrValue","riff","RIFFFile","setSignature","signature","iData","subChunks","chunkId","format","subChunksLength","frames","chunkSize","messageLength","binaryMessage","bytesSize","iFrame","plainTextBytes","framesSize","arrayBytes","chunkData","start","end","concat","diff","bytesDifference","binaryPlainText","bytesPlainText","abs","iJunk","junkStart","setting","filenameBinary","filenameArrayBuffer","filesizeBinary","filesizeArrayBuffer","averagePsnrArray","iDiff","total","averagePsnr","messageType","filenameString","messageLengthBuffer","binaryMessageLength","cipherTextBytes","binaryOutputMessage","match","outputMessage","Audio","toggleHiding","useRandom","toggleHide","hide","handleUpload","a","sourceFilename","audioSrc","audioResult","extractedMessage","getFileName","bind","getMessage","hideMessage","extractMessage","count_psnr","undefined","getElementById","source","embedded","rand","require","create","charAt","remainder","randomizedSet","Set","entry","has","add","randomizedArray","split","k","join","lastModified","lastModifiedDate","sum","toFixed","size","controls","controlsList","hidden","block","disabled","App","Tab","Container","defaultActiveKey","sm","Nav","Item","Link","eventKey","Content","Pane","Boolean","location","hostname","ReactDOM","render","StrictMode","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.76b24a52.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Jumbotron,\r\n} from 'react-bootstrap';\r\n\r\nfunction Header() {\r\n  return (\r\n    <Jumbotron className=\"background-navy border-radius-0 padding-0\">\r\n      <div className=\"content-center-grid margin-bottom-md\">\r\n        <div className=\"heading-2 bold white\">\r\n          Media Steganography\r\n        </div>\r\n        \r\n        <div className=\"content-center subheadline bold white\">\r\n          with LSB and BPCS\r\n        </div>         \r\n        \r\n      </div>\r\n\r\n      <div className=\"content-center body-text white padding-bottom-sm\">\r\n        by Eka Novendra Wahyunadi (13517011), Nixon Andhika (13517059), and Ferdy Santoso (13517116)\r\n      </div>\r\n    </Jumbotron>\r\n  )\r\n}\r\n\r\nexport default Header;","function getKeys(text) {\r\n  let result = [];\r\n\r\n  for (let i = 0; i < text.length; i++) {\r\n    let charNum = text.charCodeAt(i);\r\n    result.push(charNum);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n/* Vigenere Encoding */\r\nfunction encodeFile(plainText, key) {\r\n  let cipherText = new Uint8Array(plainText.length)\r\n\r\n  let keyCodes = getKeys(key);\r\n  for (let i = 0; i < plainText.length; i++) {\r\n    let charNum = plainText[i];\r\n    let currentKey = keyCodes[i % keyCodes.length];\r\n\r\n    charNum = (((charNum + currentKey) % 256) + 256) % 256;\r\n    cipherText[i] = charNum;\r\n  }\r\n\r\n  return cipherText;\r\n}\r\n\r\n/* Vigenere Decoding */\r\nfunction decodeFile(cipherText, key) {\r\n  let plainText = new Uint8Array(cipherText.length);\r\n\r\n  let keyCodes = getKeys(key);\r\n\r\n  for (let i = 0; i < cipherText.length; i++) {\r\n    let charNum = cipherText[i];\r\n    let currentKey = keyCodes[i % keyCodes.length];\r\n\r\n    charNum = (((charNum - currentKey) % 256) + 256) % 256;\r\n    plainText[i] = charNum;\r\n  }\r\n\r\n  return plainText;\r\n}\r\n\r\n/* Converter */\r\n\r\n// String <=> Array Buffer\r\nfunction convertArrayBufferToString(array) {\r\n  let text = \"\";\r\n  for (let i = 0; i < array.length; i++) {\r\n    text += String.fromCharCode(array[i]);\r\n  }\r\n  return text;\r\n}\r\n\r\nfunction convertStringToArrayBuffer(string) {\r\n  let result = new Uint8Array(string.length);\r\n  for (let i = 0; i < string.length; i++) {\r\n    result[i] =  string.charCodeAt(i);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Binary String <=> Array Buffer\r\n\r\nfunction convertArrayBufferToBinaryString(array) {\r\n  let text = \"\";\r\n  for (let i = 0; i < array.length; i++) {\r\n    let data = array[i].toString(2);\r\n    data = \"00000000\".substr(data.length) + data;\r\n    text += data;\r\n  }\r\n  return text;\r\n}\r\n\r\nfunction convertBinaryStringToArrayBuffer(binaryString) {\r\n  let string = removeLeadingZeroes(binaryString);\r\n  let result = new Uint8Array(string.length / 8);\r\n  let i = 0;\r\n  while (string.length > 0) {\r\n    let substr = string.substr(0, 8);\r\n    result[i] = parseInt(substr, 2);\r\n    string = string.substring(8);\r\n    i++;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction convertBinaryStringToArrayBufferWithLeadingZeroes(binaryString) {\r\n  let string = binaryString\r\n  let result = new Uint8Array(string.length / 8);\r\n  let i = 0;\r\n  console.log(result)\r\n  while (string.length > 0) {\r\n    let substr = string.substr(0, 8);\r\n    result[i] = parseInt(substr, 2);\r\n    string = string.substring(8);\r\n    i++;\r\n  }\r\n  return result;\r\n}\r\n\r\n// String <=> Binary String\r\n\r\nfunction convertStringToBinaryString(string) {\r\n  let result = \"\";\r\n  for (let i = 0; i < string.length; i++) {\r\n    let binary = string.charCodeAt(i).toString(2);\r\n    binary = \"00000000\".substr(binary.length) + binary;\r\n    result += binary;\r\n  }\r\n  return result;\r\n}\r\n\r\nfunction convertBinaryStringToString(binaryString) {\r\n  let string = removeLeadingZeroes(binaryString);\r\n  let result = \"\";\r\n  while (string.length > 0) {\r\n    let substr = string.substr(0, 8);\r\n    result += String.fromCharCode(parseInt(substr, 2));\r\n    string = string.substring(8);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\n// Binary Array <=> Array Buffer\r\n\r\nfunction convertBinaryArrayToArrayBuffer(binaryArray) {\r\n  let result = new Uint8Array(binaryArray.length);\r\n  for (let i = 0; i < binaryArray.length; i++) {\r\n    result[i] = parseInt(binaryArray[i], 2);\r\n  }\r\n  return result;\r\n}\r\n\r\n// Binary Array <=> Bitplanes\r\nfunction convertArrayBufferToBitplanesArray(array) {\r\n  let result = [];\r\n  let binaryString = convertArrayBufferToBinaryString(array);\r\n\r\n  let modRemainder = binaryString.length % 64;\r\n  if (modRemainder !== 0) {\r\n    let header = \"0\";\r\n    header = header.repeat(64 - modRemainder);\r\n    binaryString = header + binaryString;\r\n  }\r\n\r\n  while (binaryString.length > 0) {\r\n    let bitplane = [];\r\n    let substr = binaryString.substr(0, 64);\r\n    for (let i = 0; i < substr.length; i++) {\r\n      bitplane.push(substr[i]);\r\n    }\r\n    result.push(bitplane);\r\n    binaryString = binaryString.substring(64);\r\n  }\r\n\r\n  return result;\r\n}\r\n\r\nfunction convertBitplanesArrayToArrayBuffer(bitplanesArray) {\r\n  let result = new Uint8Array(bitplanesArray.length*8);\r\n  let dataCounter = 0;\r\n  for (let i = 0; i < bitplanesArray.length; i++) {\r\n    for (let j = 0; j < 64; j+=8) {\r\n      let byte = bitplanesArray[i][j] + bitplanesArray[i][j+1] +\r\n                 bitplanesArray[i][j+2] + bitplanesArray[i][j+3] +\r\n                 bitplanesArray[i][j+4] + bitplanesArray[i][j+5] +\r\n                 bitplanesArray[i][j+6] + bitplanesArray[i][j+7];\r\n      byte = parseInt(byte, 2);\r\n      result[dataCounter] = byte;\r\n      dataCounter++;\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n//Integer <=> Bitplane\r\nfunction convertIntegerToBitplane(integer) {\r\n  let bitplane = [];\r\n  let string = integer.toString(2);\r\n  let modRemainder = string.length % 64;\r\n  if (modRemainder !== 0) {\r\n    let header = \"0\";\r\n    header = header.repeat(64 - modRemainder);\r\n    string = header + string;\r\n  }\r\n\r\n  for (let i = 0; i < 64; i++) {\r\n    bitplane.push(string[i]);\r\n  }\r\n\r\n  return bitplane;\r\n}\r\n\r\nfunction convertBitplaneToInteger(bitplane) {\r\n  let firstFound = false;\r\n  let binaryString = \"\";\r\n  for (let i = 0; i < bitplane.length; i++) {\r\n    if (!firstFound) {\r\n      if (bitplane[i] === \"1\") {\r\n        firstFound = true;\r\n        binaryString += bitplane[i];\r\n      }\r\n    } else {\r\n      binaryString += bitplane[i];\r\n    }\r\n  }\r\n\r\n  if (!firstFound) {\r\n    return 0;\r\n  } else {\r\n    return parseInt(binaryString, 2);\r\n  }\r\n}\r\n\r\n// Binary Methods\r\n\r\nfunction removeLeadingZeroes(binaryString) {\r\n  let string = binaryString.replace(/^0+/, '');\r\n  let modRemainder = string.length % 8;\r\n  if (modRemainder !== 0) {\r\n    let header = \"0\";\r\n    header = header.repeat(8 - modRemainder);\r\n    string = header + string;\r\n  }\r\n\r\n  return string;\r\n}\r\n\r\n/* File Reader */\r\n\r\nfunction readFileAsArrayBuffer(file) {\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader();\r\n    reader.onload = function(e) {\r\n      resolve(e.target.result);\r\n    }\r\n    reader.onerror = reject;\r\n    reader.readAsArrayBuffer(file);\r\n  });\r\n}\r\n\r\nfunction readFileAsString(file) {\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader();\r\n    reader.onload = function(e) {\r\n      resolve(e.target.result);\r\n    }\r\n    reader.onerror = reject;\r\n    reader.readAsText(file);\r\n  });\r\n}\r\n\r\nfunction readTwoFiles(file1, file2) {\r\n  return Promise.all([readFileAsArrayBuffer(file1), readFileAsArrayBuffer(file2)]);\r\n}\r\n\r\nfunction readFileURL(file) {\r\n  return new Promise((resolve, reject) => {\r\n    let reader = new FileReader();\r\n    reader.onload = function(e) {\r\n      resolve(e.target.result);\r\n    }\r\n    reader.onerror = reject;\r\n    reader.readAsDataURL(file);\r\n  });\r\n}\r\n\r\n/* File Download */\r\n\r\nfunction downloadFile(filename, data) {\r\n  if (data) {\r\n    let blob = new Blob([data], {type: 'text/plain'});\r\n    if (window.navigator.msSaveOrOpenBlob) {\r\n      window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n      let elem = window.document.createElement('a');\r\n      elem.href = window.URL.createObjectURL(blob);\r\n      elem.download = filename;        \r\n      document.body.appendChild(elem);\r\n      elem.click();        \r\n      document.body.removeChild(elem);\r\n    }\r\n  } else {\r\n    alert(\"No result yet!\");\r\n  }\r\n}\r\n\r\nfunction downloadBinaryFile(filename, buffer) {\r\n  if (buffer) {\r\n    let blob = new Blob([buffer], {type: 'application/octet-stream'});\r\n    if (window.navigator.msSaveOrOpenBlob) {\r\n      window.navigator.msSaveBlob(blob, filename);\r\n    } else {\r\n      let elem = window.document.createElement('a');\r\n      elem.href = window.URL.createObjectURL(blob);\r\n      elem.download = filename;\r\n      document.body.appendChild(elem);\r\n      elem.click();        \r\n      document.body.removeChild(elem);\r\n    }\r\n  } else {\r\n    alert(\"No result yet!\");\r\n  }\r\n}\r\n\r\nexport {\r\n  getKeys,\r\n  encodeFile,\r\n  decodeFile,\r\n  convertArrayBufferToString,\r\n  convertStringToArrayBuffer,\r\n  convertArrayBufferToBinaryString,\r\n  convertBinaryStringToArrayBuffer,\r\n  convertStringToBinaryString,\r\n  convertBinaryStringToString,\r\n  convertBinaryArrayToArrayBuffer,\r\n  convertBinaryStringToArrayBufferWithLeadingZeroes,\r\n  convertArrayBufferToBitplanesArray,\r\n  convertBitplanesArrayToArrayBuffer,\r\n  convertIntegerToBitplane,\r\n  convertBitplaneToInteger,\r\n  removeLeadingZeroes,\r\n  readFileAsArrayBuffer,\r\n  readFileAsString,\r\n  readTwoFiles,\r\n  readFileURL,\r\n  downloadFile,\r\n  downloadBinaryFile,\r\n};","import React from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Row,\r\n} from 'react-bootstrap';\r\n\r\nimport {\r\n  convertArrayBufferToString,\r\n  convertStringToArrayBuffer,\r\n  convertArrayBufferToBinaryString,\r\n  convertBinaryStringToArrayBuffer,\r\n  convertStringToBinaryString,\r\n  convertBinaryStringToString,\r\n  convertBinaryArrayToArrayBuffer,\r\n  convertArrayBufferToBitplanesArray,\r\n  convertBitplanesArrayToArrayBuffer,\r\n  convertIntegerToBitplane,\r\n  convertBitplaneToInteger,\r\n  readFileAsArrayBuffer,\r\n  readFileURL,\r\n  encodeFile,\r\n  decodeFile,\r\n  downloadBinaryFile,\r\n} from './helper';\r\n\r\nimport shuffleSeed from 'shuffle-seed';\r\n\r\nexport default class Image extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.action = null;\r\n    this.state = {\r\n      fileName: \"hidden.png\",\r\n      resultFileName: \"result.png\",\r\n      chessboard: [\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\r\n                   \"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\r\n                   \"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\r\n                   \"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\r\n                   \"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\r\n                   \"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\r\n                   \"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\r\n                   \"1\",\"0\",\"1\",\"0\",\"1\",\"0\",\"1\",\"0\"],\r\n      sourceImgURL: null,\r\n      resultCanvas: null,\r\n      resultImgURL: null,\r\n      useEncryption: false,\r\n      psnr: null,\r\n    };\r\n  }\r\n\r\n  toggleEncryption = (event) => {\r\n    this.setState({useEncryption: event.target.checked});\r\n  }\r\n\r\n  saveFileName = (event) => {\r\n    this.setState({resultFileName: event.target.value});\r\n  }\r\n\r\n  getImageData(imageURL) {\r\n    let canvas = document.createElement('canvas');\r\n    let context = canvas.getContext('2d');\r\n    let image = document.createElement('img');\r\n    image.src = imageURL;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height;\r\n    context.drawImage(image, 0, 0);\r\n    let imageData = context.getImageData(0, 0, image.width, image.height);\r\n    return imageData;\r\n  }\r\n\r\n  LSBEmbed(sourceImgURL, fileToHide, encryptionKey, hidingOption) {\r\n    let sourceImgData = this.getImageData(sourceImgURL);\r\n    let sourceLength = sourceImgData.data.length;\r\n    let fileData = readFileAsArrayBuffer(fileToHide);\r\n    fileData.then(fileArray => {\r\n      let buffer = new Uint8Array(fileArray);\r\n\r\n      let bufferArray = null;\r\n      const { useEncryption } = this.state;\r\n      if (useEncryption) {\r\n        buffer = encodeFile(buffer, encryptionKey);\r\n        bufferArray = Array.from(buffer);\r\n        if (hidingOption === \"random\") {\r\n          bufferArray = shuffleSeed.shuffle(bufferArray, encryptionKey);\r\n        }\r\n      } else {\r\n        bufferArray = Array.from(buffer);\r\n      }\r\n\r\n      let bufferLength = buffer.length;\r\n      \r\n      //total bits for file needed = filesize(byte) * 8 (bit/byte) * 8 (1 bit at every source byte)\r\n      //total bits for header needed = 256 bytes * 8 (bit/byte) * 8 (1 bit at every source byte)\r\n      //256 bytes header = 252 bytes filename + 4 bytes filesize\r\n      if (sourceLength >= (1 + bufferLength*8*8 + 256*8*8)) {\r\n        //Convert fileName to bits\r\n        const { fileName } = this.state;\r\n\r\n        let binaryFileName = null;\r\n        if (useEncryption) {\r\n          binaryFileName = convertStringToArrayBuffer(fileName); //get array buffer\r\n          binaryFileName = encodeFile(binaryFileName, encryptionKey); //encrypt\r\n          binaryFileName = convertArrayBufferToBinaryString(binaryFileName); //get binary string\r\n        } else {\r\n          binaryFileName = convertStringToBinaryString(fileName);\r\n        }\r\n\r\n        let remainderLength = 2016-binaryFileName.length;\r\n        let header = \"0\";\r\n        header = header.repeat(remainderLength);\r\n        binaryFileName = header + binaryFileName;\r\n        \r\n        //Convert file size to bits\r\n        let fileSize = bufferLength.toString(2);\r\n        fileSize = \"00000000000000000000000000000000\".substr(fileSize.length) + fileSize;\r\n\r\n        let bufferString = convertArrayBufferToBinaryString(bufferArray);\r\n\r\n        this.setState({buffer: bufferString});\r\n        let result = [];\r\n        for (let i = 0; i < sourceLength; i++) {\r\n          let color = sourceImgData.data[i].toString(2);\r\n          if (i < 1) {\r\n            if (useEncryption && hidingOption === \"random\") {\r\n              color = color.substr(0, color.length-1) + \"0\";\r\n            } else {\r\n              color = color.substr(0, color.length-1) + \"1\";\r\n            }\r\n          } else if (i < 2017) { //1+256*8-32\r\n            color = color.substr(0, color.length-1) + binaryFileName[i-1];\r\n          } else if (i < 2049) {\r\n            color = color.substr(0, color.length-1) + fileSize[i-2017];\r\n          } else {\r\n            if (i < 2049 + bufferLength * 8) {\r\n              color = color.substr(0, color.length-1) + bufferString[i-2049];\r\n            }\r\n          }\r\n          result.push(color);\r\n        }\r\n\r\n        result = convertBinaryArrayToArrayBuffer(result);\r\n        this.renderResultImg(sourceImgURL, result);\r\n      } else {\r\n        alert(\"Source capacity is not enough\");\r\n      }\r\n    });\r\n  }\r\n\r\n  getLSB(sourceImgURL, encryptionKey) {\r\n    let sourceImgData = this.getImageData(sourceImgURL);\r\n    let sourceLength = sourceImgData.data.length;\r\n    let temp = \"\";\r\n\r\n    let hidingOptionColor = sourceImgData.data[0].toString(2);\r\n    let hidingOption = null;\r\n    if (hidingOptionColor[hidingOptionColor.length-1] === \"1\") {\r\n      hidingOption = \"sequence\";\r\n    } else {\r\n      hidingOption = \"random\";\r\n    }\r\n\r\n    for (let i = 1; i < 2049 && i < sourceLength; i++) {\r\n      let color = sourceImgData.data[i].toString(2);\r\n      let lsb = color[color.length-1];\r\n      temp += lsb;\r\n    }\r\n    \r\n    let fileName = temp.substr(0, 2016);\r\n    const { useEncryption } = this.state;\r\n    if (useEncryption) {\r\n      fileName = convertBinaryStringToArrayBuffer(fileName); \r\n      fileName = decodeFile(fileName, encryptionKey);\r\n      fileName = convertArrayBufferToString(fileName);\r\n    } else {\r\n      fileName = convertBinaryStringToString(fileName);\r\n    }\r\n\r\n    let fileSize = temp.substr(2016, 2048);\r\n    fileSize = parseInt(fileSize, 2);\r\n\r\n    let result = [];\r\n    temp = \"\";\r\n    // let fileCorrect = true;\r\n    for (let i = 0; i < fileSize * 8; i++) {\r\n      // if (!sourceImgData.data.length[2049+i]) {\r\n      //   fileCorrect = false;\r\n      //   alert(\"Input file bit format different. Enter embedded file made by this program.\");\r\n      //   break;\r\n      // }\r\n      let color = sourceImgData.data[2049+i].toString(2);\r\n      let lsb = color[color.length-1];\r\n      if (temp.length < 8) {\r\n        if (i === fileSize*8-1) {\r\n          temp = \"00000000\".substr(temp.length) + temp;\r\n          result.push(temp);\r\n        } else {\r\n          temp += lsb;\r\n        }\r\n      } else {\r\n        result.push(temp);\r\n        temp = lsb;\r\n      }\r\n    }\r\n\r\n    // if (fileCorrect) {\r\n      let resultArray = convertBinaryArrayToArrayBuffer(result);\r\n  \r\n      if (useEncryption && hidingOption === \"random\") {\r\n        let shuffledArray = Array.from(resultArray);\r\n        resultArray = shuffleSeed.unshuffle(shuffledArray, encryptionKey);\r\n      }\r\n\r\n      if (useEncryption) {\r\n        resultArray = decodeFile(resultArray, encryptionKey);\r\n      }\r\n  \r\n      downloadBinaryFile(fileName, resultArray);\r\n    // }\r\n  }\r\n\r\n  calculateComplexity(bitplane) {\r\n    const length = bitplane.length;\r\n    let counter = 0;\r\n    const max = 112;\r\n    for (let i = 0; i < length; i++) {\r\n      if (bitplane[i] === \"1\") {\r\n        //Check left\r\n        if (i-1 > 0 && (i-1)%8 !== 7) {\r\n          if (bitplane[i-1] !== bitplane[i]) counter++;\r\n        }\r\n\r\n        //Check right\r\n        if (i+1 < length && (i+1)%8 !== 0) {\r\n          if (bitplane[i+1] !== bitplane[i]) counter++;\r\n        }\r\n\r\n        //Check above\r\n        if (i-8 > 0) {\r\n          if (bitplane[i-8] !== bitplane[i]) counter++;\r\n        }\r\n\r\n        //Check below\r\n        if (i+8 < length) {\r\n          if (bitplane[i+8] !== bitplane[i]) counter++;\r\n        } \r\n      }\r\n    }\r\n    return counter/max;\r\n  }\r\n\r\n  xor(string1, string2) {\r\n    if (string1 === string2) {\r\n      return \"0\"; //white\r\n    } else {\r\n      return \"1\"; //black\r\n    }\r\n  }\r\n\r\n  convertPBC_CGC(bitplanesArray, type) {\r\n    let result = [];\r\n    let modRemainder = bitplanesArray.length % 8;\r\n    for (let i = 0; i < bitplanesArray.length; i++) {\r\n      if (i < bitplanesArray.length-modRemainder) {\r\n        if (i % 8 === 0) {\r\n          result.push(bitplanesArray[i]);\r\n        } else {\r\n          let bitplane = [];\r\n          for (let j = 0; j < 64; j++) {\r\n            let xorResult = this.xor(bitplanesArray[i-1][j], bitplanesArray[i][j]);\r\n            bitplane.push(xorResult);;\r\n          }\r\n          if (type === \"reverse\") {\r\n            bitplanesArray[i] = bitplane;\r\n          }\r\n          result.push(bitplane);\r\n        }\r\n      } else {\r\n        result.push(bitplanesArray[i]);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  conjugate(bitplane) {\r\n    const { chessboard } = this.state;\r\n    let result = [];\r\n    for (let i = 0; i < bitplane.length; i++) {\r\n      result.push(this.xor(bitplane[i], chessboard[i]));\r\n    }\r\n    return result;\r\n  }\r\n\r\n  BPCSEmbed(sourceImgURL, fileToHide, encryptionKey, hidingOption) {\r\n    let sourceImgData = this.getImageData(sourceImgURL);\r\n    let fileData = readFileAsArrayBuffer(fileToHide);\r\n    fileData.then(fileArray => {\r\n      let dataBuffer = new Uint8Array(fileArray);\r\n      \r\n      const { fileName } = this.state;\r\n      let fileNameArray = convertStringToArrayBuffer(fileName);\r\n\r\n      let hidingBitplane = null;\r\n      if (hidingOption === \"sequence\") {\r\n        hidingBitplane = convertIntegerToBitplane(1);\r\n      } else {\r\n        hidingBitplane = convertIntegerToBitplane(0);\r\n      }\r\n\r\n      fileNameArray = convertArrayBufferToBitplanesArray(fileNameArray);\r\n      let fileNameArraySizeBitplane = convertIntegerToBitplane(fileNameArray.length)\r\n\r\n      const { useEncryption } = this.state;\r\n      if (useEncryption) {\r\n        dataBuffer = encodeFile(dataBuffer, encryptionKey);\r\n        if (hidingOption === \"random\") {\r\n          let unshuffledArray = Array.from(dataBuffer);\r\n          dataBuffer = shuffleSeed.shuffle(unshuffledArray, encryptionKey);\r\n        }\r\n      }\r\n      \r\n      let dataBitplanes = convertArrayBufferToBitplanesArray(dataBuffer);\r\n      let bufferSizeBitplane = convertIntegerToBitplane(dataBitplanes.length);\r\n      let sourceBitplanes = convertArrayBufferToBitplanesArray(sourceImgData.data);\r\n      // sourceBitplanes = this.convertPBC_CGC(sourceBitplanes, \"normal\");\r\n\r\n      let hidingOptionInserted = false;\r\n      let fileNameSizeInserted = false;\r\n      let bufferSizeInserted = false;\r\n      let fileNameCounter = 0;\r\n      let fileNameConjugationMap = [];\r\n\r\n      const alpha = 0.3;\r\n      let dataCounter = 0;\r\n      let conjugationMap = [];\r\n      let noiseRegion = [];\r\n      let dataBitplanesToBeInserted = [];\r\n      for(let i = 0; i < sourceBitplanes.length; i++) {\r\n        let sourceComplexity = this.calculateComplexity(sourceBitplanes[i]);\r\n        if (sourceComplexity > alpha) {\r\n          noiseRegion.push(i);\r\n          if (!hidingOptionInserted) {\r\n            if (this.calculateComplexity(hidingBitplane) <= alpha) {\r\n              hidingBitplane = this.conjugate(hidingBitplane);\r\n            }\r\n            dataBitplanesToBeInserted.push(hidingBitplane);\r\n            hidingOptionInserted = true;\r\n          } else if (!fileNameSizeInserted) {\r\n            if (this.calculateComplexity(fileNameArraySizeBitplane) <= alpha) {\r\n              fileNameArraySizeBitplane = this.conjugate(fileNameArraySizeBitplane);\r\n            }\r\n            dataBitplanesToBeInserted.push(fileNameArraySizeBitplane);\r\n            fileNameSizeInserted = true;\r\n          } else if (fileNameCounter < fileNameArray.length) {\r\n            if (this.calculateComplexity(fileNameArray[fileNameCounter]) <= alpha) {\r\n              fileNameConjugationMap.push(fileNameCounter);\r\n              fileNameArray[fileNameCounter] = this.conjugate(fileNameArray[fileNameCounter]);\r\n            }\r\n            dataBitplanesToBeInserted.push(fileNameArray[fileNameCounter]);\r\n            fileNameCounter++;\r\n          } else if (!bufferSizeInserted) {\r\n            if (this.calculateComplexity(bufferSizeBitplane) <= alpha) {\r\n              bufferSizeBitplane = this.conjugate(bufferSizeBitplane);\r\n            }\r\n            dataBitplanesToBeInserted.push(bufferSizeBitplane);\r\n            bufferSizeInserted = true;\r\n          } else if (dataCounter < dataBitplanes.length) {\r\n            let complexity = this.calculateComplexity(dataBitplanes[dataCounter]);\r\n            if (complexity > alpha) {\r\n              dataBitplanesToBeInserted.push(dataBitplanes[dataCounter]);\r\n            } else {\r\n              conjugationMap.push(dataCounter);\r\n              let conjugation = this.conjugate(dataBitplanes[dataCounter]);\r\n              dataBitplanesToBeInserted.push(conjugation);\r\n            }\r\n            dataCounter++;\r\n          }\r\n        }\r\n      }\r\n\r\n      if (noiseRegion.length >= 2 + fileNameConjugationMap.length + conjugationMap.length + dataBitplanesToBeInserted.length) {\r\n        for (let i = 0; i < noiseRegion.length; i++) {\r\n          if (i === 0) {\r\n            let fileNameConjugationSizeBitplane = convertIntegerToBitplane(fileNameConjugationMap.length);\r\n            if (this.calculateComplexity(fileNameConjugationSizeBitplane) <= alpha) {\r\n              fileNameConjugationSizeBitplane = this.conjugate(fileNameConjugationSizeBitplane);\r\n            }\r\n            sourceBitplanes[noiseRegion[i]] = fileNameConjugationSizeBitplane;\r\n          } else if (i < fileNameConjugationMap.length + 1) {\r\n            let fileNameMapBitplane = convertIntegerToBitplane(fileNameConjugationMap[i-1]);\r\n            if (this.calculateComplexity(fileNameMapBitplane) <= alpha) {\r\n              fileNameMapBitplane = this.conjugate(fileNameMapBitplane);\r\n            }\r\n            sourceBitplanes[noiseRegion[i]] = fileNameMapBitplane;\r\n          } else if (i < fileNameConjugationMap.length + 2) {\r\n            let sizeBitplane = convertIntegerToBitplane(conjugationMap.length);\r\n            if (this.calculateComplexity(sizeBitplane) <= alpha) {\r\n              sizeBitplane = this.conjugate(sizeBitplane)\r\n            }\r\n            \r\n            sourceBitplanes[noiseRegion[i]] = sizeBitplane;\r\n          } else if (i < fileNameConjugationMap.length + 2 + conjugationMap.length) {\r\n            let excessIndex = fileNameConjugationMap.length + 2;\r\n            let mapBitplane = convertIntegerToBitplane(conjugationMap[i-excessIndex]);\r\n            if (this.calculateComplexity(mapBitplane) <= alpha)  {\r\n              mapBitplane = this.conjugate(mapBitplane);\r\n            }\r\n            sourceBitplanes[noiseRegion[i]] = mapBitplane;\r\n          } else if (i < fileNameConjugationMap.length + 2 + conjugationMap.length + dataBitplanesToBeInserted.length) {\r\n            let excessIndex = fileNameConjugationMap.length + 2 + conjugationMap.length;\r\n            sourceBitplanes[noiseRegion[i]] = dataBitplanesToBeInserted[i-excessIndex];\r\n          } else {\r\n            break;\r\n          }\r\n        }\r\n        \r\n        // sourceBitplanes = this.convertPBC_CGC(sourceBitplanes, \"reverse\");\r\n        let resultArrayBuffer = convertBitplanesArrayToArrayBuffer(sourceBitplanes);\r\n        this.renderResultImg(sourceImgURL, resultArrayBuffer);\r\n  \r\n        ////////////////EXTRACT///////////////////\r\n  \r\n        sourceBitplanes = convertArrayBufferToBitplanesArray(resultArrayBuffer);\r\n        // sourceBitplanes = this.convertPBC_CGC(sourceBitplanes, \"normal\");\r\n        let result = [];\r\n        for(let i = 0; i < sourceBitplanes.length; i++) {\r\n          if (this.calculateComplexity(sourceBitplanes[i]) > alpha) {\r\n            result.push(sourceBitplanes[i]);\r\n          }\r\n        }\r\n  \r\n        let fileNameConjugationMapSize = convertBitplaneToInteger(this.conjugate(result[0]));\r\n        let fileNameConjugationMaps = [];\r\n        for (let i = 0; i < fileNameConjugationMapSize; i++) {\r\n          fileNameConjugationMaps.push(convertBitplaneToInteger(this.conjugate(result[i+1])));\r\n        }\r\n  \r\n        let conjugationMapSize = convertBitplaneToInteger(this.conjugate(result[1+fileNameConjugationMaps.length]));\r\n        let plusIndex = 2+fileNameConjugationMaps.length;\r\n        let conjugationMaps = [];\r\n        for (let i = 0; i < conjugationMapSize; i++) {\r\n          conjugationMaps.push(convertBitplaneToInteger(this.conjugate(result[i+plusIndex])));\r\n        }\r\n  \r\n        plusIndex += conjugationMaps.length;\r\n        \r\n        let hidingCode = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n        if (hidingCode === 1) {\r\n          hidingCode = \"sequence\";\r\n        } else {\r\n          hidingCode = \"random\";\r\n        }\r\n  \r\n        plusIndex++;\r\n  \r\n        let fileNameSize = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n        \r\n        plusIndex++;\r\n  \r\n        let fileNameBitplanes = [];\r\n        for (let i = 0; i < fileNameSize; i++) { \r\n          fileNameBitplanes.push(result[i+plusIndex]);\r\n        }\r\n        \r\n        plusIndex += fileNameBitplanes.length;\r\n  \r\n        let fileNameString = \"\";\r\n        for (let i = 0; i < fileNameBitplanes.length; i++) {\r\n          let bitplane = fileNameBitplanes[i];\r\n          if (fileNameConjugationMaps.includes(i)) {\r\n            bitplane = this.conjugate(bitplane);\r\n          }\r\n  \r\n          let binaryString = \"\";\r\n          for (let j = 0; j < 64; j++) {\r\n            binaryString += bitplane[j];\r\n          }\r\n          fileNameString += convertBinaryStringToString(binaryString);\r\n        }\r\n  \r\n        let dataSize = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n        plusIndex++;\r\n  \r\n        let resultBitplanes = [];\r\n        for (let i = 0; i < dataSize; i++) {\r\n          if (conjugationMaps.includes(i)) {\r\n            resultBitplanes.push(this.conjugate(result[i+plusIndex]));\r\n          } else {\r\n            resultBitplanes.push(result[i+plusIndex]);\r\n          }\r\n        }\r\n        \r\n        let resultArray = convertBitplanesArrayToArrayBuffer(resultBitplanes);\r\n        let firstFound = false;\r\n        let leadingZeroes = 0;\r\n        for (let i = 0; i < resultArray.length && !firstFound; i++) {\r\n          if (resultArray[i] !== 0) {\r\n            firstFound = true;\r\n          } else {\r\n            leadingZeroes++;\r\n          }\r\n        }\r\n        \r\n        let finalArray = new Uint8Array(resultArray.length-leadingZeroes);\r\n        for (let i = leadingZeroes; i < resultArray.length; i++) {\r\n          finalArray[i-leadingZeroes] = resultArray[i];\r\n        }\r\n        \r\n        if (useEncryption) {\r\n          if (hidingOption === \"random\") {\r\n            let shuffledArray = Array.from(finalArray);\r\n            finalArray = shuffleSeed.unshuffle(shuffledArray, encryptionKey);\r\n          }\r\n  \r\n          finalArray = decodeFile(finalArray, encryptionKey);\r\n        }\r\n        \r\n        downloadBinaryFile(fileNameString, finalArray);\r\n      } else {\r\n        alert(\"Source capacity is not enough\");\r\n      }\r\n\r\n    });\r\n  }\r\n\r\n  getBPCS(sourceImgURL, encryptionKey) {\r\n    let sourceImgData = this.getImageData(sourceImgURL);\r\n    let sourceBitplanes = convertArrayBufferToBitplanesArray(sourceImgData.data);\r\n    sourceBitplanes = this.convertPBC_CGC(sourceBitplanes, \"normal\");\r\n\r\n    const alpha = 0.3;\r\n    let result = [];\r\n    for(let i = 0; i < sourceBitplanes.length; i++) {\r\n      if (this.calculateComplexity(sourceBitplanes[i]) > alpha) {\r\n        result.push(sourceBitplanes[i]);\r\n      }\r\n    }\r\n\r\n    let fileNameConjugationMapSize = convertBitplaneToInteger(this.conjugate(result[0]));\r\n    let fileNameConjugationMap = [];\r\n    for (let i = 0; i < fileNameConjugationMapSize; i++) {\r\n      fileNameConjugationMap.push(convertBitplaneToInteger(this.conjugate(result[i+1])));\r\n    }\r\n\r\n    let conjugationMapSize = convertBitplaneToInteger(this.conjugate(result[1+fileNameConjugationMap.length]));\r\n    let plusIndex = 2+fileNameConjugationMap.length;\r\n    let conjugationMap = [];\r\n    for (let i = 0; i < conjugationMapSize; i++) {\r\n      conjugationMap.push(convertBitplaneToInteger(this.conjugate(result[i+plusIndex])));\r\n    }\r\n\r\n    plusIndex += conjugationMap.length;\r\n    \r\n    let hidingOption = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n    if (hidingOption === 1) {\r\n      hidingOption = \"sequence\";\r\n    } else {\r\n      hidingOption = \"random\";\r\n    }\r\n\r\n    plusIndex++;\r\n\r\n    let fileNameSize = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n    \r\n    plusIndex++;\r\n\r\n    let fileNameBitplanes = [];\r\n    for (let i = 0; i < fileNameSize; i++) { \r\n      fileNameBitplanes.push(result[i+plusIndex]);\r\n    }\r\n    \r\n    plusIndex += fileNameBitplanes.length;\r\n\r\n    let fileName = \"\";\r\n    for (let i = 0; i < fileNameBitplanes.length; i++) {\r\n      let bitplane = fileNameBitplanes[i];\r\n      if (fileNameConjugationMap.includes(i)) {\r\n        bitplane = this.conjugate(bitplane);\r\n      }\r\n\r\n      let binaryString = \"\";\r\n      for (let j = 0; j < 64; j++) {\r\n        binaryString += bitplane[j];\r\n      }\r\n      fileName += convertBinaryStringToString(binaryString);\r\n    }\r\n\r\n    let dataSize = convertBitplaneToInteger(this.conjugate(result[plusIndex]));\r\n    plusIndex++;\r\n\r\n    let resultBitplanes = [];\r\n    for (let i = 0; i < dataSize; i++) {\r\n      if (conjugationMap.includes(i)) {\r\n        resultBitplanes.push(this.conjugate(result[i+plusIndex]));\r\n      } else {\r\n        resultBitplanes.push(result[i+plusIndex]);\r\n      }\r\n    }\r\n    \r\n    let resultArray = convertBitplanesArrayToArrayBuffer(resultBitplanes);\r\n    let firstFound = false;\r\n    let leadingZeroes = 0;\r\n    for (let i = 0; i < resultArray.length && !firstFound; i++) {\r\n      if (resultArray[i] !== 0) {\r\n        firstFound = true;\r\n      } else {\r\n        leadingZeroes++;\r\n      }\r\n    }\r\n    \r\n    let finalArray = new Uint8Array(resultArray.length-leadingZeroes);\r\n    for (let i = leadingZeroes; i < resultArray.length; i++) {\r\n      finalArray[i-leadingZeroes] = resultArray[i];\r\n    }\r\n\r\n    const { useEncryption } = this.state;\r\n\r\n    if (useEncryption) {\r\n      if (hidingOption === \"random\") {\r\n        let shuffledArray = Array.from(finalArray);\r\n        finalArray = shuffleSeed.unshuffle(shuffledArray, encryptionKey);\r\n      }\r\n\r\n      finalArray = decodeFile(finalArray, encryptionKey);\r\n    }\r\n    \r\n    downloadBinaryFile(fileName, finalArray);\r\n  }\r\n\r\n  renderImg = (file) => {\r\n    if (file.length > 0) {\r\n      let fileData = file[0];\r\n      let fileURL = readFileURL(fileData);\r\n      fileURL.then(url => {\r\n        this.setState({sourceImgURL: url});\r\n      });\r\n    } else {\r\n      this.setState({sourceImgURL: null});\r\n    }\r\n  }\r\n\r\n  renderResultImg(sourceImgURL, steganoArray) {\r\n    let canvas = document.createElement('canvas');\r\n    let context = canvas.getContext('2d');\r\n    let image = document.createElement('img');\r\n    image.src = sourceImgURL;\r\n    canvas.width = image.width;\r\n    canvas.height = image.height; \r\n    let steganoClampedArray = new Uint8ClampedArray(steganoArray);\r\n    let steganoImgData = new ImageData(steganoClampedArray, image.width, image.height);\r\n\r\n    context.putImageData(steganoImgData, 0, 0);\r\n    let resultImg = new Image();\r\n    resultImg.src = canvas.toDataURL();\r\n    this.setState({resultImgURL: resultImg.src, resultCanvas: canvas});\r\n\r\n    this.calculatePSNR(image.width, image.height, sourceImgURL, steganoImgData);\r\n  }\r\n\r\n  calculatePSNR(M, N, sourceImgURL, resultImgData) {\r\n    let value = 0;\r\n    let sourceImgData = this.getImageData(sourceImgURL);\r\n\r\n    for (let i = 0; i < sourceImgData.data.length; i++) {\r\n      value += Math.pow(sourceImgData.data[i] - resultImgData.data[i], 2);\r\n    }\r\n\r\n    let rms = Math.sqrt( (1 / (M*N) ) * value );\r\n    let psnr = 20 * Math.log10(256/rms);\r\n    psnr = Math.round(psnr * 100) / 100;\r\n    this.setState({psnr: psnr});\r\n    return psnr;\r\n  }\r\n\r\n  downloadFromCanvas(fileName, canvas) {\r\n    let link = document.createElement('a');\r\n    link.download = fileName;\r\n    canvas.toBlob(function(blob) {\r\n      link.href = URL.createObjectURL(blob);\r\n      link.click();\r\n    }, 'application/octet-stream');\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    const { sourceImgURL } = this.state;\r\n    let sourceImg = event.target.inputSourceImg;\r\n    let fileToHide = event.target.inputFile;\r\n    let methodOption = event.target.methodOption.value;\r\n    let encryptionKey = event.target.encryptKey.value;\r\n    let hidingOption = event.target.hidingOption.value;\r\n\r\n    if (methodOption === \"lsb\") {\r\n      if (this.action === \"hide\") {\r\n        if (sourceImg.files.length > 0 && fileToHide.files.length > 0) {\r\n          this.setState({fileName: fileToHide.files[0].name});\r\n          this.LSBEmbed(sourceImgURL, fileToHide.files[0], encryptionKey, hidingOption);\r\n        } else {\r\n          alert(\"Source Media and File to Hide Must Exist!\");\r\n        }\r\n      } else { //this.action === \"extract\"\r\n        if (sourceImg.files.length > 0) {\r\n          this.getLSB(sourceImgURL, encryptionKey);\r\n        } else {\r\n          alert(\"Source Media to Extract Must Exist!\");\r\n        }\r\n      }\r\n    } else { //BPCS\r\n      if (this.action === \"hide\") {\r\n        if (sourceImg.files.length > 0 && fileToHide.files.length > 0) {\r\n          this.setState({fileName: fileToHide.files[0].name});\r\n          this.BPCSEmbed(sourceImgURL, fileToHide.files[0], encryptionKey, hidingOption);\r\n        } else {\r\n          alert(\"Source Media and File to Hide Must Exist!\");\r\n        }\r\n      } else { //this.action === \"extract\"\r\n        if (sourceImg.files.length > 0) {\r\n          this.getBPCS(sourceImgURL, encryptionKey);\r\n        } else {\r\n          this.getLSB(sourceImgURL, encryptionKey);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { sourceImgURL, resultCanvas, resultImgURL, useEncryption, psnr } = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Form onSubmit={this.handleSubmit} className=\"margin-bottom-md\">\r\n          <Row>\r\n            <Col xs={4} className=\"content-start\">\r\n              <div className=\"content-center subheadline bold margin-bottom-sm\">\r\n                Source Media\r\n              </div>\r\n              <div className=\"content-center full-width image-container margin-bottom-xs\">\r\n                <img id=\"sourceImg\" src={sourceImgURL} className=\"full-height\"/>\r\n              </div>\r\n              <Form.Group>\r\n                <Form.File id=\"inputSourceImg\" label=\"Upload source image\" onChange={(e) => this.renderImg(e.target.files)} accept=\"image/x-png,image/bmp\"/>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col xs={4}>\r\n              <div className=\"content-center subheadline bold margin-bottom-xxl\">\r\n                File to Hide\r\n              </div>\r\n              <div className=\"body-text bold margin-bottom-sm\">\r\n                Choose file to hide within source image\r\n              </div>\r\n              <Form.Group>\r\n                <Form.File id=\"inputFile\"/>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col xs={4}>\r\n              <div className=\"content-center subheadline bold margin-bottom-sm\">\r\n                Result Media\r\n              </div>\r\n              <div className=\"content-center full-width image-container margin-bottom-xs\">\r\n                <img id=\"resultImg\" src={resultImgURL} className=\"full-height\"/>\r\n              </div>\r\n              <Row>\r\n                <div>Enter filename with extension</div>\r\n              </Row>\r\n              <Row>\r\n                <Col className=\"no-indent\">\r\n                  <Form.Group controlId=\"filenameField\">\r\n                    <Form.Control\r\n                      type=\"text\"\r\n                      onChange={(event) => {this.saveFileName(event)}}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col className=\"no-indent\">\r\n                  <Button\r\n                    variant=\"success\"\r\n                    type=\"button\"\r\n                    className=\"margin-bottom-xs\"\r\n                    onClick={() => this.downloadFromCanvas(this.state.resultFileName, resultCanvas)}\r\n                  >\r\n                    {\" \"}\r\n                    Download Result\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <Row>\r\n                <div className=\"bold\">PSNR: {psnr ? psnr : \"-\"}</div>\r\n              </Row>\r\n            </Col>\r\n\r\n          </Row>\r\n\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"methodOption\">\r\n                <Form.Label>Method</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                  <option value=\"lsb\">LSB</option>\r\n                  <option value=\"bpcs\">BPCS</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group controlId=\"useEncryption\">\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  label=\"Use Encryption\"\r\n                  onChange={this.toggleEncryption}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"encryptKey\">\r\n                <Form.Label>Encryption Key</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  readOnly={!useEncryption}\r\n                  ref={(ref) => {\r\n                    this.encryptKey = ref;\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"hidingOption\">\r\n                <Form.Label>Hiding Option</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                  <option value=\"sequence\">Sequential</option>\r\n                  <option value=\"random\">Random</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                className=\"full-width margin-bottom-xs\"\r\n                onClick={() => (this.action = \"hide\")}\r\n              >\r\n                {\" \"}\r\n                Hide\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"info\"\r\n                type=\"submit\"\r\n                className=\"full-width\"\r\n                onClick={() => (this.action = \"extract\")}\r\n              >\r\n                {\" \"}\r\n                Extract\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport {\r\n  Button,\r\n  Col,\r\n  Form,\r\n  Row,\r\n  ResponsiveEmbed\r\n} from 'react-bootstrap';\r\n\r\nimport {\r\n  readTwoFiles,\r\n  readFileURL,\r\n  downloadBinaryFile,\r\n  encodeFile,\r\n  decodeFile,\r\n  convertBinaryStringToString,\r\n  convertStringToBinaryString,\r\n  convertStringToArrayBuffer,\r\n  convertArrayBufferToString,\r\n  convertArrayBufferToBinaryString,\r\n  convertBinaryStringToArrayBufferWithLeadingZeroes,\r\n} from './helper';\r\n\r\nimport { \r\n  RIFFFile\r\n} from 'riff-file';\r\n\r\nimport shuffleSeed from 'shuffle-seed';\r\n\r\nexport default class Video extends React.PureComponent {\r\n  constructor(props) {\r\n    super(props);\r\n    this.action = null;\r\n    this.state = {\r\n      sourceVid: null,\r\n      sourceVidURL: null,\r\n      message: null,\r\n      messageURL: null,\r\n      resultVid: null,\r\n      resultVidURL: null,\r\n      seed: null,\r\n      resultFilename: \"\",\r\n      useEncryption: false,\r\n      psnrValue: null,\r\n    };\r\n  }\r\n\r\n  LSBEmbed(plainText, message, messageFilename, frameOption, hidingOption, useEncryption, key, seed) {\r\n    //ENCRYPTION ALGORITHM\r\n    // Read AVI File\r\n    let riff = new RIFFFile();\r\n    riff.setSignature(plainText)\r\n    console.log(riff.signature)\r\n    // Find subChunks with format 'movi' indicating video data\r\n    let iData = 0\r\n    for (let i = 0; i < riff.signature.subChunks.length; i++) {\r\n      if (riff.signature.subChunks[i].chunkId === 'LIST' && riff.signature.subChunks[i].format === 'movi') {\r\n        iData = i\r\n        break;\r\n      }\r\n    }\r\n    let subChunksLength = riff.signature.subChunks[iData].subChunks.length\r\n    let frames = []\r\n\r\n    // Extract video data from AVI file, and divide it into frames\r\n    // Also counts data size\r\n    let dataSize = 0\r\n    for (let i = 0; i < subChunksLength; i++) {\r\n      if (riff.signature.subChunks[iData].subChunks[i].chunkId[2] === 'd') {\r\n        frames.push(riff.signature.subChunks[iData].subChunks[i])\r\n        dataSize += riff.signature.subChunks[iData].subChunks[i].chunkSize\r\n      }\r\n    }\r\n\r\n    // Encrypt message if key !== -1\r\n    let cipherText = plainText\r\n    let messageLength = message.length\r\n    if (useEncryption) {\r\n      message = encodeFile(message, key)\r\n    }\r\n\r\n    // randomize frame sequence if frameOption === 'random'\r\n    if (frameOption === 'random') {\r\n      frames = shuffleSeed.shuffle(frames, seed)\r\n    }\r\n\r\n    if (messageLength * 8 > dataSize) {\r\n      alert(\"Source capacity is not enough\");\r\n      return\r\n    }\r\n\r\n    // convert Uint8Array to binary string\r\n    let binaryMessage = ''\r\n    for (let i = 0; i < messageLength; i++) {\r\n      binaryMessage += (\"000000000\" + message[i].toString(2)).substr(-8)\r\n    }\r\n\r\n    // construct stream of frames used\r\n    let bytesSize = 0\r\n    let iFrame = 0\r\n    let plainTextBytes = []\r\n    let framesSize = []\r\n    while (bytesSize < binaryMessage.length) {\r\n      let arrayBytes = []\r\n      for (let i = frames[iFrame].chunkData.start; i < frames[iFrame].chunkData.end; i++) {\r\n        arrayBytes.push(i)\r\n      }\r\n      framesSize.push(frames[iFrame].chunkSize)\r\n      if (hidingOption === 'random') {\r\n        arrayBytes = shuffleSeed.shuffle(arrayBytes, seed)\r\n      }\r\n      plainTextBytes = plainTextBytes.concat(arrayBytes)\r\n      bytesSize += frames[iFrame].chunkSize\r\n      iFrame += 1\r\n    }\r\n    let diff = bytesSize - binaryMessage.length\r\n    // framesSize[framesSize.length - 1] = framesSize[framesSize.length - 1] - diff\r\n\r\n    // LSB algorithm\r\n    let bytesDifference = []\r\n    for (let i = 0; i < binaryMessage.length; i++) {\r\n      let binaryPlainText = (\"000000000\" + plainText[plainTextBytes[i]].toString(2)).substr(-8)\r\n      binaryPlainText = binaryPlainText.substring(0, 7) + binaryMessage[i]\r\n      let bytesPlainText = parseInt(binaryPlainText, 2)\r\n      \r\n      bytesDifference.push(Math.pow(Math.abs(cipherText[plainTextBytes[i]] - bytesPlainText), 2))\r\n      cipherText[plainTextBytes[i]] = bytesPlainText\r\n    }\r\n\r\n    for (let i = 0; i < diff; i++) {\r\n      bytesDifference.push(0)\r\n    }\r\n\r\n    // insert metadata to 'JUNK'\r\n    // find 'JUNK' location\r\n    let iJunk = 0\r\n    for (let i = 0; i < riff.signature.subChunks.length; i++) {\r\n      if (riff.signature.subChunks[i].chunkId === 'JUNK') {\r\n        iJunk = i\r\n        break;\r\n      }\r\n    }\r\n    let junkStart = riff.signature.subChunks[iJunk].chunkData.start\r\n    let junkEnd = riff.signature.subChunks[iJunk].chunkData.end\r\n\r\n    let setting = ''\r\n    let filename = ''\r\n    let filesize = ''\r\n    // frame and hiding option\r\n    if (frameOption === 'random') {\r\n      setting += '0'\r\n    }\r\n    else {\r\n      setting += '1'\r\n    }\r\n    if (hidingOption === 'random') {\r\n      setting += '0'\r\n    }\r\n    else {\r\n      setting += '1'\r\n    }\r\n    setting = '000000' + setting\r\n    setting = parseInt(setting, 2)\r\n    cipherText[junkStart] = setting\r\n    iJunk = junkStart + 1\r\n\r\n    // filename\r\n    let filenameBinary = convertStringToBinaryString(messageFilename)\r\n\r\n    while (filenameBinary.length < 2016) {\r\n      filenameBinary = '0' + filenameBinary\r\n    }\r\n\r\n    let filenameArrayBuffer = convertBinaryStringToArrayBufferWithLeadingZeroes(filenameBinary)\r\n    for (let i = 0; i < 252; i++) {\r\n      cipherText[iJunk] = filenameArrayBuffer[i]\r\n      iJunk += 1\r\n    }\r\n\r\n    // filesize\r\n    let filesizeBinary = messageLength.toString(2)\r\n    while (filesizeBinary.length < 32) {\r\n      filesizeBinary = '0' + filesizeBinary\r\n    }\r\n    let filesizeArrayBuffer = convertBinaryStringToArrayBufferWithLeadingZeroes(filesizeBinary)\r\n    for (let i = 0; i < 4; i++) {\r\n      cipherText[iJunk] = filesizeArrayBuffer[i]\r\n      iJunk += 1\r\n    }\r\n\r\n    // calculate psnr\r\n    let averagePsnrArray = []\r\n    let iDiff = 0;\r\n    for (let i = 0; i < framesSize.length; i++) {\r\n      let psnr = 0;\r\n      let rms = 0;\r\n      let total = 0;\r\n      for (let j = 0; j < framesSize[i]; j++) {\r\n        total += bytesDifference[iDiff]\r\n        iDiff += 1\r\n      }\r\n      rms = Math.sqrt(total / framesSize[i])\r\n      psnr = 20 * Math.log10(255/rms)\r\n      averagePsnrArray.push(psnr)\r\n    }\r\n\r\n    let averagePsnr = 0\r\n    for (let i = 0; i < averagePsnrArray.length; i++) {\r\n      averagePsnr += averagePsnrArray[i]\r\n    }\r\n    averagePsnr = averagePsnr / averagePsnrArray.length\r\n\r\n    this.setState({ psnrValue: averagePsnr })\r\n    this.setState({ resultFilename: \"result.avi\" })\r\n    this.setState({ resultVid: cipherText })\r\n\r\n  }\r\n\r\n  LSBExtract(cipherText, useEncryption, key, seed) {\r\n    //DECRYPTION ALGORITHM\r\n    // Read AVI File\r\n    let riff = new RIFFFile();\r\n    riff.setSignature(cipherText)\r\n\r\n    // extract metadata\r\n    // extract message length\r\n    let iJunk = 0\r\n    for (let i = 0; i < riff.signature.subChunks.length; i++) {\r\n      if (riff.signature.subChunks[i].chunkId === 'JUNK') {\r\n        iJunk = i\r\n        break;\r\n      }\r\n    }\r\n    let junkStart = riff.signature.subChunks[iJunk].chunkData.start\r\n    let junkEnd = riff.signature.subChunks[iJunk].chunkData.end\r\n\r\n    let messageType = []\r\n    messageType.push(cipherText[junkStart])\r\n    messageType = convertArrayBufferToBinaryString(messageType)\r\n    let frameOption = messageType[6]\r\n    let hidingOption = messageType[7]\r\n    if (frameOption === '0') {\r\n      frameOption = 'random'\r\n    }\r\n    else {\r\n      frameOption = 'sequence'\r\n    }\r\n    if (hidingOption === '0') {\r\n      hidingOption = 'random'\r\n    }\r\n    else {\r\n      hidingOption = 'sequence'\r\n    }\r\n    iJunk = junkStart + 1\r\n\r\n    // filename\r\n    let filenameArrayBuffer = new Uint8Array(252)\r\n    for (let i = 0; i < 252; i++) {\r\n      filenameArrayBuffer[i] = cipherText[iJunk]\r\n      iJunk += 1\r\n    }\r\n    let filenameString = convertBinaryStringToString(convertArrayBufferToBinaryString(filenameArrayBuffer))\r\n\r\n    // message size\r\n    let messageLengthBuffer = new Uint8Array(4)\r\n    for (let i = 0; i < 252; i++) {\r\n      messageLengthBuffer[i] = cipherText[iJunk]\r\n      iJunk += 1\r\n    }\r\n    let messageLength = parseInt(convertArrayBufferToBinaryString(messageLengthBuffer), 2)\r\n    let binaryMessageLength = messageLength * 8;\r\n\r\n    // Find subChunks with format 'movi' indicating video data\r\n    let iData = 0\r\n    for (let i = 0; i < riff.signature.subChunks.length; i++) {\r\n      if (riff.signature.subChunks[i].chunkId === 'LIST' && riff.signature.subChunks[i].format === 'movi') {\r\n        iData = i\r\n        break;\r\n      }\r\n    }\r\n    let subChunksLength = riff.signature.subChunks[iData].subChunks.length\r\n    let frames = []\r\n\r\n    // Extract video data from AVI file, and divide it into frames\r\n    for (let i = 0; i < subChunksLength; i++) {\r\n      if (riff.signature.subChunks[iData].subChunks[i].chunkId[2] === 'd') {\r\n        frames.push(riff.signature.subChunks[iData].subChunks[i])\r\n      }\r\n    }\r\n\r\n    // Encrypt message if key !== -1\r\n    let plainText = cipherText\r\n    \r\n\r\n    // randomize frame sequence if frameOption === 'random'\r\n    if (frameOption === 'random') {\r\n      frames = shuffleSeed.shuffle(frames, seed)\r\n    }\r\n    \r\n    // construct stream of frames used\r\n    let bytesSize = 0\r\n    let iFrame = 0\r\n    let cipherTextBytes = []\r\n    while (bytesSize < binaryMessageLength) {\r\n      let arrayBytes = []\r\n      for (let i = frames[iFrame].chunkData.start; i < frames[iFrame].chunkData.end; i++) {\r\n        arrayBytes.push(i)\r\n      }\r\n      if (hidingOption === 'random') {\r\n        arrayBytes = shuffleSeed.shuffle(arrayBytes, seed)\r\n      }\r\n      cipherTextBytes = cipherTextBytes.concat(arrayBytes)\r\n      bytesSize += frames[iFrame].chunkSize\r\n      iFrame += 1\r\n    }\r\n\r\n    // LSB algorithm\r\n    let binaryOutputMessage = ''\r\n    for (let i = 0; i < binaryMessageLength; i++) {\r\n      let binaryCipherText = (\"000000000\" + cipherText[cipherTextBytes[i]].toString(2)).substr(-8)\r\n      binaryOutputMessage += binaryCipherText[7]\r\n    }\r\n\r\n    // divide outputMessage by 8\r\n    binaryOutputMessage = binaryOutputMessage.match(/.{1,8}/g);\r\n\r\n    // convert array of binary to array of int\r\n    let outputMessage = new Uint8Array(binaryOutputMessage.length)\r\n    for (let i = 0; i < binaryOutputMessage.length; i++) {\r\n      outputMessage[i] = parseInt(binaryOutputMessage[i], 2)\r\n    }\r\n\r\n    // decode message if previously encoded\r\n    if (useEncryption) {\r\n      outputMessage = decodeFile(outputMessage, key)\r\n    }\r\n\r\n    this.setState({ resultFilename: filenameString })\r\n    this.setState({ resultVid: outputMessage })\r\n  }\r\n\r\n  getSeedFromKey(key) {\r\n    let seed = 0\r\n    for (let i = 0; i < key.length; i++) {\r\n      seed += key.charCodeAt(i)\r\n    }\r\n\r\n    return seed\r\n  }\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    let sourceVid = event.target.inputSourceVid;\r\n    let message = event.target.inputMessage;\r\n    let messageFilename\r\n    if (this.action === \"LSBEmbed\" && sourceVid.files.length > 0 && message.files.length > 0) {\r\n      messageFilename = message.files[0].name\r\n    }\r\n    else if (this.action === \"LSBEmbed\" && (sourceVid.files.length <= 0 || message.files.length <= 0)) {\r\n      alert(\"Source Media and Message Media must Exist!\");\r\n      return\r\n    }\r\n\r\n    if ((this.action === 'LSBEmbed' && sourceVid.files.length > 0 && message.files.length > 0) || (this.action === 'LSBExtract' && sourceVid.files.length > 0)) {\r\n      let { sourceVid, message } = this.state;\r\n      let frameOption = event.target.frameOption.value;\r\n      let useEncryption = event.target.useEncryption.checked;\r\n      let hidingOption = event.target.hidingOption.value;\r\n      let key = event.target.key.value;\r\n\r\n      if (this.action === 'LSBExtract') {\r\n        message = new File([\"\"], \"filename\");\r\n      }\r\n      let readResult = readTwoFiles(sourceVid, message);\r\n      var seed;\r\n\r\n      readResult.then(([sourceArray, messageArray]) => {\r\n        let sourceBuffer = new Uint8Array(sourceArray);\r\n        let messageBuffer = new Uint8Array(messageArray);\r\n        if (this.action === \"LSBEmbed\") {\r\n          //CALL ENCRYPTION WITH NECESSARY PARAMS\r\n          if (useEncryption) {\r\n            if (key === null || key === \"\") {\r\n              alert(\"Encryption cancelled. Provide key for encryption.\");\r\n              return;\r\n            }\r\n          }\r\n          if (hidingOption === 'random' || frameOption === 'random') {\r\n            if (key === null || key === \"\") {\r\n              alert(\"Encryption cancelled. Provide key for random seed.\");\r\n              return;\r\n            }\r\n          }\r\n          seed = this.getSeedFromKey(key)\r\n          this.setState({ seed: seed})\r\n          this.LSBEmbed(sourceBuffer, messageBuffer, messageFilename, frameOption, hidingOption, useEncryption, key, seed);\r\n        } else {\r\n          //CALL DECRYPTIOn WITH NECESSARY PARAMS\r\n          if (useEncryption) {\r\n            if (key === null || key === \"\") {\r\n              alert(\"Decryption cancelled. Provide key for decryption.\");\r\n              return;\r\n            }\r\n          }\r\n          if (hidingOption === 'random' || frameOption === 'random') {\r\n            if (key === null || key === \"\") {\r\n              alert(\"Decryption cancelled. Provide key for random seed.\");\r\n              return;\r\n            }\r\n          }\r\n          seed = this.getSeedFromKey(key)\r\n          this.setState({ seed: seed })\r\n          this.LSBExtract(sourceBuffer, useEncryption, key, seed);\r\n        }\r\n      });\r\n    } else {\r\n      alert(\"Source Media and Message Media must Exist!\");\r\n    }\r\n  }\r\n\r\n  renderVid = (file, type) => {\r\n    if (file.length > 0) {\r\n      let fileData = file[0];\r\n      let fileURL = readFileURL(fileData);\r\n      fileURL.then(url => {\r\n        if (type === \"source\") {\r\n          this.setState({sourceVid: fileData, sourceVidURL: url});\r\n        } else if (type === \"message\") {\r\n          this.setState({message: fileData, messageURL: url});\r\n        } else {\r\n          this.setState({resultVidURL: url});\r\n        }\r\n      });\r\n    } else {\r\n      if (type === \"source\") {\r\n        this.setState({sourceVid: null, sourceVidURL: null});\r\n      } else if (type === \"message\") {\r\n        this.setState({message: null, messageURL: null});\r\n      } else {\r\n        this.setState({resultVid: null, resultVidURL: null});\r\n      }\r\n    }\r\n  }\r\n\r\n  toggleEncryption = (event) => {\r\n    this.setState({ useEncryption: event.target.checked });\r\n  }\r\n\r\n  saveFileName = (event) => {\r\n    this.setState({ resultFilename: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { sourceVidURL, messageURL, resultVid, resultVidURL, resultFilename, useEncryption, psnrValue} = this.state;\r\n    return (\r\n      <React.Fragment>\r\n        <Form onSubmit={this.handleSubmit} className=\"margin-bottom-md\">\r\n          <Row>\r\n            <Col xs={4} className=\"content-start\">\r\n              <div className=\"content-center subheadline bold margin-bottom-xxl\">\r\n                Source Media\r\n              </div>\r\n              <div className=\"body-text bold margin-bottom-sm\">\r\n                {/* <ResponsiveEmbed aspectRatio=\"16by9\">\r\n                  <video src={sourceVidURL} className=\"full-height\" controls/>\r\n                </ResponsiveEmbed> */}\r\n                Choose source video\r\n              </div>\r\n              <Form.Group>\r\n                <Form.File id=\"inputSourceVid\" label=\"Upload source video\" onChange={(e) => this.renderVid(e.target.files, \"source\")} accept=\"video/avi\"/>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col xs={4}>\r\n              <div className=\"content-center subheadline bold margin-bottom-xxl\">\r\n                File to Hide\r\n              </div>\r\n              <div className=\"body-text bold margin-bottom-sm\">\r\n                Choose file to hide within source video\r\n              </div>\r\n              <Form.Group>\r\n                <Form.File id=\"inputMessage\" onChange={(e) => this.renderVid(e.target.files, \"message\")}/>\r\n              </Form.Group>\r\n            </Col>\r\n\r\n            <Col xs={4}>\r\n              <div className=\"content-center subheadline bold margin-bottom-xxl\">\r\n                Result Media\r\n              </div>\r\n              <div className=\"body-text bold margin-bottom-sm\">\r\n                {/* <ResponsiveEmbed aspectRatio=\"16by9\">\r\n                  <video src={resultVidURL} className=\"full-height\" controls/>\r\n                </ResponsiveEmbed> */}\r\n                Download Result Video\r\n              </div>\r\n              <Row>\r\n                <div>Enter filename with extension</div>\r\n              </Row>\r\n              <Row>\r\n                <Col className=\"no-indent\">\r\n                  <Form.Group controlId=\"filenameField\">\r\n                    <Form.Control\r\n                      value={resultFilename}\r\n                      type=\"text\"\r\n                      onChange={(event) => { this.saveFileName(event) }}\r\n                    />\r\n                  </Form.Group>\r\n                </Col>\r\n                <Col className=\"no-indent\">\r\n                  <Button\r\n                    variant=\"success\"\r\n                    type=\"button\"\r\n                    className=\"margin-bottom-xs\"\r\n                    onClick={() => downloadBinaryFile(resultFilename, resultVid)}\r\n                  >\r\n                    {\" \"}\r\n                    Download Result\r\n                  </Button>\r\n                </Col>\r\n              </Row>\r\n              <div>\r\n                PSNR: {psnrValue}\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n          <Row>\r\n            <Col>\r\n              <Form.Group controlId=\"useEncryption\">\r\n                <Form.Check\r\n                  type=\"checkbox\"\r\n                  label=\"Use Encryption\"\r\n                  onChange={this.toggleEncryption}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"key\">\r\n                <Form.Label>Encryption Key</Form.Label>\r\n                <Form.Control\r\n                  type=\"text\"\r\n                  readOnly={!useEncryption}\r\n                  ref={(ref) => {\r\n                    this.key = ref;\r\n                  }}\r\n                />\r\n              </Form.Group>\r\n              <Form.Group controlId=\"frameOption\">\r\n                <Form.Label>Frame Option</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                  <option value=\"sequence\">Sequential</option>\r\n                  <option value=\"random\">Random</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Form.Group controlId=\"hidingOption\">\r\n                <Form.Label>Hiding Option</Form.Label>\r\n                <Form.Control as=\"select\">\r\n                  <option value=\"sequence\">Sequential</option>\r\n                  <option value=\"random\">Random</option>\r\n                </Form.Control>\r\n              </Form.Group>\r\n              <Button\r\n                variant=\"primary\"\r\n                type=\"submit\"\r\n                className=\"full-width margin-bottom-xs\"\r\n                onClick={() => (this.action = \"LSBEmbed\")}\r\n              >\r\n                {\" \"}\r\n                Hide\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"info\"\r\n                type=\"submit\"\r\n                className=\"full-width\"\r\n                onClick={() => (this.action = \"LSBExtract\")}\r\n              >\r\n                {\" \"}\r\n                Extract\r\n              </Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nimport {Button, Col, Form, Row,} from 'react-bootstrap';\r\nimport {\r\n    convertArrayBufferToBinaryString,\r\n    convertBinaryStringToArrayBuffer,\r\n    convertBinaryStringToString,\r\n    convertStringToBinaryString,\r\n    decodeFile,\r\n    encodeFile,\r\n    readFileAsArrayBuffer\r\n} from \"./helper\";\r\n\r\nexport default class Audio extends React.PureComponent {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            useEncryption: false,\r\n            useRandom: false,\r\n            hide: true,\r\n            audioSrc: \"\",\r\n            audioResult: \"\",\r\n            extractedMessage: \"\",\r\n            sourceFilename: \"\",\r\n            messageFilename: \"\"\r\n        };\r\n\r\n        this.getFileName = this.getFileName.bind(this);\r\n        this.getMessage = this.getMessage.bind(this);\r\n        this.hideMessage = this.hideMessage.bind(this);\r\n        this.extractMessage = this.extractMessage.bind(this);\r\n        this.count_psnr = this.count_psnr.bind(this);\r\n    }\r\n\r\n    toggleEncryption = (event) => {\r\n        this.setState({useEncryption: event.target.checked});\r\n    }\r\n\r\n    toggleHiding = (event) => {\r\n        this.setState({useRandom: event.target.value === \"random\"});\r\n    }\r\n\r\n    toggleHide = (event) => {\r\n        this.setState({hide: event.target.value === \"hide\"});\r\n    }\r\n\r\n    handleUpload = async (event) => {\r\n        let files = event.target.files;\r\n        if (files.length > 0) {\r\n            this.setState({sourceFilename: files[0].name, audioSrc: URL.createObjectURL(files[0])});\r\n        }\r\n    }\r\n\r\n    async getMessage() {\r\n        let message = document.getElementById(\"messageFile\").files[0];\r\n        if (message !== undefined) {\r\n            message = new Uint8Array(await readFileAsArrayBuffer(message));\r\n            if (this.state.useEncryption) {\r\n                message = encodeFile(message, document.getElementById('audiokey').value);\r\n            }\r\n            return message\r\n        } else {\r\n            alert(\"Please input message\");\r\n        }\r\n    }\r\n\r\n    async getFileName() {\r\n        let message = document.getElementById(\"messageFile\").files[0];\r\n        if (message !== undefined) {\r\n            return message.name\r\n        } else {\r\n            alert(\"Please input message\");\r\n        }\r\n    }\r\n\r\n    async hideMessage(event) {\r\n        event.preventDefault();\r\n        if (this.state.useEncryption || this.state.useRandom) {\r\n            if (document.getElementById('audiokey').value === \"\") {\r\n                alert(\"please input key\");\r\n                return;\r\n            }\r\n        }\r\n        let files = document.getElementById('inputSourceAudio').files;\r\n        let source = new Uint8Array(await readFileAsArrayBuffer(files[0]));\r\n        source = convertArrayBufferToBinaryString(source);\r\n        let message = convertArrayBufferToBinaryString(await this.getMessage());\r\n        if (source.length < (message.length + 2049) * 8) {\r\n            alert(\"message too large\");\r\n            return;\r\n        }\r\n\r\n        let embedded = \"\";\r\n        if (this.state.useRandom) {\r\n            embedded += \"0\";\r\n        } else {\r\n            embedded += \"1\";\r\n        }\r\n        let filename = await this.getFileName();\r\n        filename = convertStringToBinaryString(filename);\r\n        filename = \"0\".repeat(2016 - filename.length) + filename;\r\n        embedded += filename;\r\n        let fileSize = message.length / 8;\r\n        fileSize = fileSize.toString(2);\r\n        fileSize = \"0\".repeat(32 - fileSize.length) + fileSize;\r\n        embedded += fileSize;\r\n        embedded += message;\r\n        let result = source.substr(0, 359);\r\n        let i = 359;\r\n        if (this.state.useRandom) {\r\n            let rand = require('random-seed').create();\r\n            rand.seed(document.getElementById('audiokey').value);\r\n            while ((embedded.length > ((i - 351) / 8) - 1) && (i < 16744)) {\r\n                if ((i + 1) % 8 !== 0 ||\r\n                    embedded.charAt(((i - 351) / 8) - 1) === undefined ||\r\n                    embedded.charAt(((i - 351) / 8) - 1) === \"\") {\r\n                    result += source.charAt(i);\r\n                } else {\r\n                    result += embedded.charAt(((i - 351) / 8) - 1);\r\n                }\r\n                i++;\r\n            }\r\n            let remainder = source.length - result.length;\r\n            result += source.substr(i, source.length - result.length);\r\n            remainder /= 8;\r\n            let randomizedSet = new Set();\r\n            for (let j = 0; j < message.length; j++) {\r\n                let entry = rand(remainder + 1);\r\n                while (randomizedSet.has(entry)) {\r\n                    entry = rand(remainder + 1);\r\n                }\r\n                randomizedSet.add(entry);\r\n            }\r\n            let randomizedArray = Array.from(randomizedSet);\r\n            result = result.split(\"\");\r\n            for (let k = 0; k < message.length; k++) {\r\n                result[16751 + randomizedArray[k] * 8] = message[k];\r\n            }\r\n            result = result.join(\"\");\r\n        } else {\r\n            while (embedded.length > ((i - 351) / 8) - 1) {\r\n                if ((i + 1) % 8 !== 0 ||\r\n                    embedded.charAt(((i - 351) / 8) - 1) === undefined ||\r\n                    embedded.charAt(((i - 351) / 8) - 1) === \"\") {\r\n                    result += source.charAt(i);\r\n                } else {\r\n                    result += embedded.charAt(((i - 351) / 8) - 1);\r\n                }\r\n                i++;\r\n            }\r\n            result += source.substr(i, source.length - result.length);\r\n        }\r\n\r\n        result = convertBinaryStringToArrayBuffer(result);\r\n        let file = new File([result], this.state.sourceFilename, {\r\n            lastModified: document.getElementById(\"inputSourceAudio\").files[0].lastModified,\r\n            lastModifiedDate: document.getElementById(\"inputSourceAudio\").files[0].lastModifiedDate\r\n        });\r\n        this.setState({audioResult: URL.createObjectURL(file)});\r\n        this.count_psnr(convertBinaryStringToArrayBuffer(source), result);\r\n    }\r\n\r\n    count_psnr(source, result) {\r\n        let sum = 0;\r\n        for (let i = 0; i < source.length; i++) {\r\n            sum += Math.pow((source[i] - result[i]), 2);\r\n        }\r\n        let psnr = 20 * Math.log10(255 / Math.sqrt(sum / source.length));\r\n        alert(\"PSNR : \" + psnr.toFixed(2) + \" dB\");\r\n    }\r\n\r\n    async extractMessage(event) {\r\n        event.preventDefault();\r\n        if (!this.state.useRandom && !this.state.useEncryption) {\r\n            document.getElementById('audiokey').value = \"\";\r\n        }\r\n        if (this.state.useEncryption || this.state.useRandom) {\r\n            if (document.getElementById('audiokey').value === \"\") {\r\n                alert(\"please input key\");\r\n                return;\r\n            }\r\n        }\r\n        let files = document.getElementById('inputSourceAudio').files;\r\n        let source = new Uint8Array(await readFileAsArrayBuffer(files[0]));\r\n        source = convertArrayBufferToBinaryString(source);\r\n        if (source.charAt(359) === '0') {\r\n            this.setState({useRandom: true});\r\n        } else {\r\n            this.setState({useRandom: false});\r\n        }\r\n        let filename = \"\";\r\n\r\n        for (let i = 0; i < 2016; i++) {\r\n            filename += source.charAt(367 + i * 8);\r\n        }\r\n        this.setState({messageFilename: convertBinaryStringToString(filename)});\r\n\r\n        let size = \"\";\r\n\r\n        for (let i = 0; i < 32; i++) {\r\n            size += source.charAt(16495 + i * 8);\r\n        }\r\n\r\n        size = parseInt(size, 2) * 8;\r\n\r\n        let message = \"\";\r\n        if (this.state.useRandom) {\r\n            if (document.getElementById('audiokey').value === \"\") {\r\n                alert(\"please input key\");\r\n                return;\r\n            }\r\n            let rand = require('random-seed').create();\r\n            rand.seed(document.getElementById('audiokey').value);\r\n            let remainder = source.length - 16744;\r\n            remainder /= 8;\r\n            let randomizedSet = new Set();\r\n            for (let j = 0; j < size; j++) {\r\n                let entry = rand(remainder + 1);\r\n                while (randomizedSet.has(entry)) {\r\n                    entry = rand(remainder + 1);\r\n                }\r\n                randomizedSet.add(entry);\r\n            }\r\n            let randomizedArray = Array.from(randomizedSet);\r\n            for (let k = 0; k < size; k++) {\r\n                message += source.charAt(16751 + randomizedArray[k] * 8);\r\n            }\r\n        } else {\r\n            for (let i = 0; i < size; i++) {\r\n                message += source.charAt(16751 + i * 8);\r\n            }\r\n        }\r\n        message = convertBinaryStringToArrayBuffer(message);\r\n        if (this.state.useEncryption) {\r\n            if (document.getElementById('audiokey').value === \"\") {\r\n                alert(\"please input key\");\r\n                return;\r\n            }\r\n            message = decodeFile(message, document.getElementById('audiokey').value);\r\n        }\r\n        let file = new File([message], this.state.messageFilename);\r\n        this.setState({extractedMessage: URL.createObjectURL(file)});\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Form className=\"margin-bottom-md\">\r\n                    <Row>\r\n                        <Col xs={4} className=\"content-start\">\r\n                            <div className=\"content-center subheadline bold margin-bottom-sm\">\r\n                                Source Media\r\n                            </div>\r\n                            <div className=\"content-center full-width margin-bottom-xs\">\r\n                                <audio src={this.state.audioSrc} controls controlsList=\"nodownload\">\r\n                                    Your browser does not support the audio element.\r\n                                </audio>\r\n                            </div>\r\n                            <Form.Group>\r\n                                <Form.File id=\"inputSourceAudio\" label=\"Upload source audio\"\r\n                                           accept=\"audio/wav\" onChange={this.handleUpload}/>\r\n                            </Form.Group>\r\n                        </Col>\r\n\r\n                        <Col xs={4}>\r\n                            <div className=\"content-center subheadline bold margin-bottom-sm\">\r\n                                Message\r\n                            </div>\r\n                            <Row>\r\n                                <Form.Group hidden={!this.state.hide}>\r\n                                    <Form.File id=\"messageFile\"/>\r\n                                </Form.Group>\r\n                                <Col>\r\n                                    <a href={this.state.extractedMessage} download={this.state.messageFilename}>\r\n                                        <Button\r\n                                            variant=\"success\"\r\n                                            type=\"button\"\r\n                                            block=\"inline\"\r\n                                            className=\"margin-bottom-xs\"\r\n                                            hidden={this.state.hide}\r\n                                            disabled={this.state.extractedMessage === \"\"}\r\n                                        >Download Message</Button></a>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                        <Col xs={4} hidden={!this.state.hide}>\r\n                            <div className=\"content-center subheadline bold margin-bottom-sm\">\r\n                                Result Media\r\n                            </div>\r\n                            <div className=\"content-center full-width margin-bottom-xs\">\r\n                                <audio src={this.state.audioResult} controls controlsList=\"nodownload\">\r\n                                    Your browser does not support the audio element.\r\n                                </audio>\r\n                            </div>\r\n                            <Row>\r\n                                <Col>\r\n                                    <a href={this.state.audioResult} download={this.state.sourceFilename}>\r\n                                        <Button\r\n                                            variant=\"success\"\r\n                                            type=\"button\"\r\n                                            block=\"inline\"\r\n                                            className=\"margin-bottom-xs\"\r\n                                            disabled={this.state.audioResult === \"\"}\r\n                                        >Download Result</Button></a>\r\n                                </Col>\r\n                            </Row>\r\n                        </Col>\r\n\r\n                    </Row>\r\n\r\n                    <Row>\r\n                        <Col>\r\n                            <Form.Group controlId=\"useEncryption\">\r\n                                <Form.Check\r\n                                    type=\"checkbox\"\r\n                                    label=\"Use Encryption\"\r\n                                    onChange={this.toggleEncryption}\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"wantOption\" onChange={this.toggleHide}>\r\n                                <Form.Label>What you want to do?</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option value=\"hide\">Hide message to media</option>\r\n                                    <option value=\"extract\">Extract message from media</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"audiokey\"\r\n                                        hidden={!this.state.useEncryption && !this.state.useRandom}>\r\n                                <Form.Label>Encryption Key</Form.Label>\r\n                                <Form.Control\r\n                                    type=\"text\"\r\n                                />\r\n                            </Form.Group>\r\n                            <Form.Group controlId=\"randomOption\" onChange={this.toggleHiding} hidden={!this.state.hide}>\r\n                                <Form.Label>Hiding Option</Form.Label>\r\n                                <Form.Control as=\"select\">\r\n                                    <option value=\"sequence\">Sequential</option>\r\n                                    <option value=\"random\">Random</option>\r\n                                </Form.Control>\r\n                            </Form.Group>\r\n                            <Button\r\n                                variant=\"primary\"\r\n                                type=\"submit\"\r\n                                className=\"full-width margin-bottom-xs\"\r\n                                hidden={!this.state.hide}\r\n                                onClick={this.hideMessage}\r\n                            >Hide</Button>\r\n\r\n                            <Button\r\n                                variant=\"info\"\r\n                                type=\"submit\"\r\n                                className=\"full-width\"\r\n                                hidden={this.state.hide}\r\n                                onClick={this.extractMessage}\r\n                            >Extract</Button>\r\n                        </Col>\r\n                    </Row>\r\n                </Form>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Tab, Row, Col, Nav } from \"react-bootstrap\";\r\n\r\nimport Header from \"./Header\";\r\nimport Image from \"./Steganography/Image\";\r\nimport Video from \"./Steganography/Video\";\r\nimport Audio from \"./Steganography/Audio\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <Header />\r\n      <div className=\"content-fluid\">\r\n        <Tab.Container defaultActiveKey=\"image-steganography\">\r\n          <Row>\r\n            <Col sm={2}>\r\n              <Nav variant=\"pills\" className=\"flex-column\">\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"image-steganography\">\r\n                    Image Steganography\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"video-steganography\">\r\n                    Video Steganography\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n                <Nav.Item>\r\n                  <Nav.Link eventKey=\"audio-steganography\">\r\n                    Audio Steganography\r\n                  </Nav.Link>\r\n                </Nav.Item>\r\n              </Nav>\r\n            </Col>\r\n            <Col sm={10} className=\"content-center\">\r\n              <Tab.Content className=\"full-width\">\r\n                <Tab.Pane eventKey=\"image-steganography\">\r\n                  <Image/>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"video-steganography\">\r\n                  <Video/>\r\n                </Tab.Pane>\r\n                <Tab.Pane eventKey=\"audio-steganography\">\r\n                  <Audio></Audio>\r\n                </Tab.Pane>\r\n              </Tab.Content>\r\n            </Col>\r\n          </Row>\r\n        </Tab.Container>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// Importing the Bootstrap CSS\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}